==========================
Usage for 0-add_integer.py
==========================

This module defines a function that adds integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 7)
    11

::

    >>> add_integer(4, -7)
    -3

It works with big numbers

::

   >>> add_integer(10000, 15000)
   25000

::

   >>> add_integer(999.999, 599.999)
   1598

::

   >>> add_integer(100000, 200000)
   300000

::

   >>> add_integer(-1119, 7000)
   5881

The function also works with floating-point values.

::

    >>> add_integer(3.14, 3.0)
    6

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(12.5, 0.2)
    12

::

    >>> add_integer(-12.5, -0.2)
    -12

Floating and non-floating point values can be combined.

::

    >>> add_integer(9.8, -3)
    6

The second argument is optional - by default, it is 98.

::

    >>> add_integer(5)
    103

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("Python", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "Is awesome")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("python", "rocks")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
